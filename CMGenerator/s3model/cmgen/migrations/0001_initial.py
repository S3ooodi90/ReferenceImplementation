# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django_extensions.db.fields
from django.conf import settings
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Attestation',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('ct_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='UUID', help_text='A unique identifier for this PCT.', editable=False)),
                ('created', models.DateTimeField(verbose_name='created', auto_now_add=True, help_text='The dateTime that the PCT was created.')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated', help_text='Last update.')),
                ('published', models.BooleanField(verbose_name='published', default=False, help_text='Published must be a green check icon in order to use this in a CM. This is not a user editable. It is managed by the publication process.')),
                ('description', models.TextField(null=True, verbose_name='description', help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the PcT.')),
                ('schema_code', models.TextField(blank=True, null=True, verbose_name='Schema Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create an entry in a CM.')),
                ('asserts', models.TextField(blank=True, null=True, verbose_name='asserts', default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.')),
                ('lang', models.CharField(max_length=40, verbose_name='language', default='en-US', help_text='Choose the language of this PcT.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('r_code', models.TextField(blank=True, null=True, verbose_name='R Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create a function for the R data analysis.')),
                ('xqr_code', models.TextField(blank=True, null=True, verbose_name='XQuery Read', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to read the PcT.')),
                ('xqw_code', models.TextField(blank=True, null=True, verbose_name='XQuery Write', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to write the PcT.')),
                ('label', models.CharField(max_length=110, verbose_name='label', help_text='A label used to identify this model in CM Generator.')),
            ],
            options={
                'verbose_name': 'Attestation',
                'ordering': ['prj_name', 'label'],
            },
        ),
        migrations.CreateModel(
            name='Audit',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('ct_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='UUID', help_text='A unique identifier for this PCT.', editable=False)),
                ('created', models.DateTimeField(verbose_name='created', auto_now_add=True, help_text='The dateTime that the PCT was created.')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated', help_text='Last update.')),
                ('published', models.BooleanField(verbose_name='published', default=False, help_text='Published must be a green check icon in order to use this in a CM. This is not a user editable. It is managed by the publication process.')),
                ('description', models.TextField(null=True, verbose_name='description', help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the PcT.')),
                ('schema_code', models.TextField(blank=True, null=True, verbose_name='Schema Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create an entry in a CM.')),
                ('asserts', models.TextField(blank=True, null=True, verbose_name='asserts', default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.')),
                ('lang', models.CharField(max_length=40, verbose_name='language', default='en-US', help_text='Choose the language of this PcT.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('r_code', models.TextField(blank=True, null=True, verbose_name='R Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create a function for the R data analysis.')),
                ('xqr_code', models.TextField(blank=True, null=True, verbose_name='XQuery Read', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to read the PcT.')),
                ('xqw_code', models.TextField(blank=True, null=True, verbose_name='XQuery Write', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to write the PcT.')),
                ('label', models.CharField(max_length=110, verbose_name='label', help_text='A label used to identify this model in CM Generator.')),
            ],
            options={
                'verbose_name_plural': 'Audits',
                'verbose_name': 'Audit',
                'ordering': ['prj_name', 'label'],
            },
        ),
        migrations.CreateModel(
            name='Cluster',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('ct_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='UUID', help_text='A unique identifier for this PCT.', editable=False)),
                ('created', models.DateTimeField(verbose_name='created', auto_now_add=True, help_text='The dateTime that the PCT was created.')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated', help_text='Last update.')),
                ('published', models.BooleanField(verbose_name='published', default=False, help_text='Published must be a green check icon in order to use this in a CM. This is not a user editable. It is managed by the publication process.')),
                ('description', models.TextField(null=True, verbose_name='description', help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the PcT.')),
                ('schema_code', models.TextField(blank=True, null=True, verbose_name='Schema Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create an entry in a CM.')),
                ('asserts', models.TextField(blank=True, null=True, verbose_name='asserts', default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.')),
                ('lang', models.CharField(max_length=40, verbose_name='language', default='en-US', help_text='Choose the language of this PcT.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('r_code', models.TextField(blank=True, null=True, verbose_name='R Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create a function for the R data analysis.')),
                ('xqr_code', models.TextField(blank=True, null=True, verbose_name='XQuery Read', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to read the PcT.')),
                ('xqw_code', models.TextField(blank=True, null=True, verbose_name='XQuery Write', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to write the PcT.')),
                ('cluster_subject', models.CharField(max_length=110, verbose_name='cluster subject', help_text='Enter a text name for this subject of this cluster.')),
                ('clusters', models.ManyToManyField(blank=True, to='cmgen.Cluster', help_text='Select zero or more Clusters to include in this Cluster. You cannot put a Cluster inside itself, it will be ignored if you select itself.')),
            ],
            options={
                'verbose_name': 'Cluster',
                'ordering': ['prj_name', 'cluster_subject'],
            },
        ),
        migrations.CreateModel(
            name='Concept',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('ct_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='UUID', help_text='A unique identifier for this PCT.', editable=False)),
                ('created', models.DateTimeField(verbose_name='created', auto_now_add=True, help_text='The dateTime that the PCT was created.')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated', help_text='Last update.')),
                ('published', models.BooleanField(verbose_name='published', default=False, help_text='Published must be a green check icon in order to use this in a CM. This is not a user editable. It is managed by the publication process.')),
                ('description', models.TextField(null=True, verbose_name='description', help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the PcT.')),
                ('schema_code', models.TextField(blank=True, null=True, verbose_name='Schema Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create an entry in a CM.')),
                ('asserts', models.TextField(blank=True, null=True, verbose_name='asserts', default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.')),
                ('lang', models.CharField(max_length=40, verbose_name='language', default='en-US', help_text='Choose the language of this PcT.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('r_code', models.TextField(blank=True, null=True, verbose_name='R Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create a function for the R data analysis.')),
                ('xqr_code', models.TextField(blank=True, null=True, verbose_name='XQuery Read', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to read the PcT.')),
                ('xqw_code', models.TextField(blank=True, null=True, verbose_name='XQuery Write', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to write the PcT.')),
                ('title', models.CharField(unique=True, max_length=255, verbose_name='title', help_text='Enter the name of this  Model (CM)')),
                ('license', models.CharField(max_length=255, verbose_name='rights', default='All Rights Reserved.', help_text='Enter the rights or license statement.')),
                ('rights_holder_name', models.CharField(max_length=255, verbose_name='Rights Holder Name', help_text='Enter the name of the publisher/copyright holder.')),
                ('rights_holder_email', models.CharField(blank=True, max_length=255, verbose_name='Rights Holder Email', default=' ', help_text='Enter the email of the publisher/copyright holder.')),
                ('relation', models.CharField(blank=True, max_length=255, verbose_name='relation', default='None', help_text='Enter the relationship to another Concpet Model, if applicable.')),
                ('pub_date', django_extensions.db.fields.ModificationDateTimeField(blank=True, verbose_name='date of publication', default=django.utils.timezone.now, help_text='Date of publication.', editable=False)),
                ('encoding', models.CharField(max_length=20, verbose_name='encoding', default='utf-8', help_text="Normally leave as utf-8 default. Otherwise see: <a href='http://www.iana.org/assignments/character-sets/character-sets.txt'>List of encoding types at IANA.</a>")),
                ('attested', models.ForeignKey(to='cmgen.Attestation', help_text='Choose the attested element model of this Concept Model (CM)', verbose_name='Attestation')),
                ('audits', models.ManyToManyField(verbose_name='Audits', to='cmgen.Audit', help_text='Choose the audit element models of this Concept Model (CM)')),
                ('author', models.ForeignKey(to=settings.AUTH_USER_MODEL, help_text='Choose Author of this Concept Model (CM)', verbose_name='author', related_name='creator')),
                ('contributors', models.ManyToManyField(verbose_name='contributors', to=settings.AUTH_USER_MODEL, help_text='Select contributors to this Concept Model (CM)')),
                ('data', models.ForeignKey(to='cmgen.Cluster', help_text='Choose the data element cluster of this Concept Model (CM)', verbose_name='Data Cluster')),
            ],
            options={
                'verbose_name': 'Concept',
                'ordering': ['prj_name', 'title'],
            },
        ),
        migrations.CreateModel(
            name='DvBoolean',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('ct_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='UUID', help_text='A unique identifier for this PCT.', editable=False)),
                ('created', models.DateTimeField(verbose_name='created', auto_now_add=True, help_text='The dateTime that the PCT was created.')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated', help_text='Last update.')),
                ('published', models.BooleanField(verbose_name='published', default=False, help_text='Published must be a green check icon in order to use this in a CM. This is not a user editable. It is managed by the publication process.')),
                ('description', models.TextField(null=True, verbose_name='description', help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the PcT.')),
                ('schema_code', models.TextField(blank=True, null=True, verbose_name='Schema Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create an entry in a CM.')),
                ('asserts', models.TextField(blank=True, null=True, verbose_name='asserts', default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.')),
                ('lang', models.CharField(max_length=40, verbose_name='language', default='en-US', help_text='Choose the language of this PcT.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('r_code', models.TextField(blank=True, null=True, verbose_name='R Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create a function for the R data analysis.')),
                ('xqr_code', models.TextField(blank=True, null=True, verbose_name='XQuery Read', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to read the PcT.')),
                ('xqw_code', models.TextField(blank=True, null=True, verbose_name='XQuery Write', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to write the PcT.')),
                ('data_name', models.CharField(db_index=True, max_length=110, verbose_name='data name', help_text='Type a name for this ComplexType.')),
                ('adapter_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='Element UUID', help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific DvAdapter complexType.', editable=False)),
                ('vtb_required', models.BooleanField(verbose_name='VTB Required?', default=False, help_text='Require a Valid begin time?')),
                ('vte_required', models.BooleanField(verbose_name='VTE Required?', default=False, help_text='Require a Valid end time?')),
                ('true_values', models.TextField(verbose_name='true options', help_text="Enter the set of values that are Boolean TRUEs. For instance, if this is a 'Yes/No' type of concept, usually the 'Yes' is a Boolean TRUE. Enter one per line.")),
                ('false_values', models.TextField(verbose_name='false options', help_text="Enter the set of values that are Boolean FALSEs. For instance, if this is a 'Yes/No' type of concept, usually the 'No' is a Boolean FALSE. Enter one per line.")),
            ],
            options={
                'verbose_name_plural': 'DvBooleans',
                'verbose_name': 'DvBoolean',
                'ordering': ['prj_name', 'data_name'],
            },
        ),
        migrations.CreateModel(
            name='DvCount',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('ct_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='UUID', help_text='A unique identifier for this PCT.', editable=False)),
                ('created', models.DateTimeField(verbose_name='created', auto_now_add=True, help_text='The dateTime that the PCT was created.')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated', help_text='Last update.')),
                ('published', models.BooleanField(verbose_name='published', default=False, help_text='Published must be a green check icon in order to use this in a CM. This is not a user editable. It is managed by the publication process.')),
                ('description', models.TextField(null=True, verbose_name='description', help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the PcT.')),
                ('schema_code', models.TextField(blank=True, null=True, verbose_name='Schema Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create an entry in a CM.')),
                ('asserts', models.TextField(blank=True, null=True, verbose_name='asserts', default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.')),
                ('lang', models.CharField(max_length=40, verbose_name='language', default='en-US', help_text='Choose the language of this PcT.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('r_code', models.TextField(blank=True, null=True, verbose_name='R Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create a function for the R data analysis.')),
                ('xqr_code', models.TextField(blank=True, null=True, verbose_name='XQuery Read', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to read the PcT.')),
                ('xqw_code', models.TextField(blank=True, null=True, verbose_name='XQuery Write', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to write the PcT.')),
                ('data_name', models.CharField(db_index=True, max_length=110, verbose_name='data name', help_text='Type a name for this ComplexType.')),
                ('adapter_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='Element UUID', help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific DvAdapter complexType.', editable=False)),
                ('vtb_required', models.BooleanField(verbose_name='VTB Required?', default=False, help_text='Require a Valid begin time?')),
                ('vte_required', models.BooleanField(verbose_name='VTE Required?', default=False, help_text='Require a Valid end time?')),
                ('normal_status', models.CharField(blank=True, max_length=110, null=True, verbose_name='normal status', help_text='Enter text that indicates a normal status.')),
                ('min_inclusive', models.DecimalField(blank=True, decimal_places=10, max_digits=19, help_text='Enter the minimum (inclusive) value for the magnitude.', null=True, verbose_name='minimum inclusive')),
                ('max_inclusive', models.DecimalField(blank=True, decimal_places=10, max_digits=19, help_text='Enter the maximum (inclusive) value for the magnitude.', null=True, verbose_name='maximum inclusive')),
                ('min_exclusive', models.DecimalField(blank=True, decimal_places=10, max_digits=19, help_text='Enter the minimum (exclusive) value for the magnitude.', null=True, verbose_name='minimum exclusive')),
                ('max_exclusive', models.DecimalField(blank=True, decimal_places=10, max_digits=19, help_text='Enter the maximum (exclusive) value for the magnitude.', null=True, verbose_name='maximum exclusive')),
                ('fraction_digits', models.IntegerField(blank=True, null=True, verbose_name='fraction digits', help_text='Specifies the maximum number of decimal places allowed. Must be equal to or greater than zero for DvQuantity. For DvCount it is zero.')),
                ('total_digits', models.IntegerField(blank=True, null=True, verbose_name='total digits', help_text='Enter the maximum number of digits for the magnitude.')),
            ],
            options={
                'verbose_name': 'DvCount',
                'ordering': ['prj_name', 'data_name'],
            },
        ),
        migrations.CreateModel(
            name='DvInterval',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('ct_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='UUID', help_text='A unique identifier for this PCT.', editable=False)),
                ('created', models.DateTimeField(verbose_name='created', auto_now_add=True, help_text='The dateTime that the PCT was created.')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated', help_text='Last update.')),
                ('published', models.BooleanField(verbose_name='published', default=False, help_text='Published must be a green check icon in order to use this in a CM. This is not a user editable. It is managed by the publication process.')),
                ('description', models.TextField(null=True, verbose_name='description', help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the PcT.')),
                ('schema_code', models.TextField(blank=True, null=True, verbose_name='Schema Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create an entry in a CM.')),
                ('asserts', models.TextField(blank=True, null=True, verbose_name='asserts', default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.')),
                ('lang', models.CharField(max_length=40, verbose_name='language', default='en-US', help_text='Choose the language of this PcT.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('r_code', models.TextField(blank=True, null=True, verbose_name='R Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create a function for the R data analysis.')),
                ('xqr_code', models.TextField(blank=True, null=True, verbose_name='XQuery Read', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to read the PcT.')),
                ('xqw_code', models.TextField(blank=True, null=True, verbose_name='XQuery Write', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to write the PcT.')),
                ('data_name', models.CharField(db_index=True, max_length=110, verbose_name='data name', help_text='Type a name for this ComplexType.')),
                ('adapter_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='Element UUID', help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific DvAdapter complexType.', editable=False)),
                ('vtb_required', models.BooleanField(verbose_name='VTB Required?', default=False, help_text='Require a Valid begin time?')),
                ('vte_required', models.BooleanField(verbose_name='VTE Required?', default=False, help_text='Require a Valid end time?')),
                ('lower', models.CharField(blank=True, max_length=110, null=True, verbose_name='Lower Value', help_text='Enter the lower value of the interval. This will be used to set the minInclusive facet.')),
                ('upper', models.CharField(blank=True, max_length=110, null=True, verbose_name='Upper Value', help_text='Enter the upper value of the interval. This will be used to set the maxInclusive facet.')),
                ('interval_type', models.CharField(max_length=20, verbose_name='Interval Type', default='Select Type:', help_text='The XML Schema datatype of the upper and lower values.', choices=[('None', 'Select Type:'), ('int', 'Count data (xs:int)'), ('decimal', 'Real set numbers (xs:decimal)'), ('float', 'Floating Point (xs:float)'), ('dateTime', 'Date/Time (YYYY-MM-DDTHH:mm:ss)'), ('date', 'Date (YYYY-MM-DD)'), ('time', 'Time (HH:mm:ss)'), ('duration', 'Duration (xs:duration)')])),
                ('lower_included', models.BooleanField(verbose_name='Lower Included?', default=True, help_text='Uncheck this box if the lower value is excluded in the interval')),
                ('upper_included', models.BooleanField(verbose_name='Upper Included?', default=True, help_text='Uncheck this box if the upper value is excluded in the interval')),
                ('lower_bounded', models.BooleanField(verbose_name='Lower Bounded?', default=True, help_text="Uncheck this box if the lower value is unbounded. If unchecked, instances must be set to xsi:nil='true'")),
                ('upper_bounded', models.BooleanField(verbose_name='Upper Bounded?', default=True, help_text="Uncheck this box if the lower value is unbounded. If unchecked, instances must be set to xsi:nil='true'")),
            ],
            options={
                'verbose_name': 'DvInterval',
                'ordering': ['prj_name', 'data_name'],
            },
        ),
        migrations.CreateModel(
            name='DvLink',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('ct_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='UUID', help_text='A unique identifier for this PCT.', editable=False)),
                ('created', models.DateTimeField(verbose_name='created', auto_now_add=True, help_text='The dateTime that the PCT was created.')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated', help_text='Last update.')),
                ('published', models.BooleanField(verbose_name='published', default=False, help_text='Published must be a green check icon in order to use this in a CM. This is not a user editable. It is managed by the publication process.')),
                ('description', models.TextField(null=True, verbose_name='description', help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the PcT.')),
                ('schema_code', models.TextField(blank=True, null=True, verbose_name='Schema Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create an entry in a CM.')),
                ('asserts', models.TextField(blank=True, null=True, verbose_name='asserts', default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.')),
                ('lang', models.CharField(max_length=40, verbose_name='language', default='en-US', help_text='Choose the language of this PcT.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('r_code', models.TextField(blank=True, null=True, verbose_name='R Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create a function for the R data analysis.')),
                ('xqr_code', models.TextField(blank=True, null=True, verbose_name='XQuery Read', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to read the PcT.')),
                ('xqw_code', models.TextField(blank=True, null=True, verbose_name='XQuery Write', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to write the PcT.')),
                ('data_name', models.CharField(db_index=True, max_length=110, verbose_name='data name', help_text='Type a name for this ComplexType.')),
                ('adapter_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='Element UUID', help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific DvAdapter complexType.', editable=False)),
                ('vtb_required', models.BooleanField(verbose_name='VTB Required?', default=False, help_text='Require a Valid begin time?')),
                ('vte_required', models.BooleanField(verbose_name='VTE Required?', default=False, help_text='Require a Valid end time?')),
                ('relation', models.CharField(max_length=110, verbose_name='relation', help_text="The relationship term describing the URI. Usually constrained by an ontology such as <a href='http://www.obofoundry.org/cgi-bin/detail.cgi?id=ro'>OBO RO</a>.")),
                ('relation_uri', models.URLField(blank=True, max_length=1024, verbose_name='relation URL', default='', help_text="A URL where the definition of the relation element term can be found. Normally points to an ontology such as the <a href='http://www.obofoundry.org/cgi-bin/detail.cgi?id=ro'>OBO RO</a>.")),
                ('link_value', models.URLField(blank=True, max_length=1024, verbose_name='link', default='', help_text='A URI specifying the linked item. Optional in the generator but required in instance data. If specified here, this value will be enforced in instance data.')),
            ],
            options={
                'verbose_name_plural': 'DvLinks',
                'verbose_name': 'DvLink',
                'ordering': ['prj_name', 'data_name'],
            },
        ),
        migrations.CreateModel(
            name='DvMedia',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('ct_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='UUID', help_text='A unique identifier for this PCT.', editable=False)),
                ('created', models.DateTimeField(verbose_name='created', auto_now_add=True, help_text='The dateTime that the PCT was created.')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated', help_text='Last update.')),
                ('published', models.BooleanField(verbose_name='published', default=False, help_text='Published must be a green check icon in order to use this in a CM. This is not a user editable. It is managed by the publication process.')),
                ('description', models.TextField(null=True, verbose_name='description', help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the PcT.')),
                ('schema_code', models.TextField(blank=True, null=True, verbose_name='Schema Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create an entry in a CM.')),
                ('asserts', models.TextField(blank=True, null=True, verbose_name='asserts', default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.')),
                ('lang', models.CharField(max_length=40, verbose_name='language', default='en-US', help_text='Choose the language of this PcT.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('r_code', models.TextField(blank=True, null=True, verbose_name='R Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create a function for the R data analysis.')),
                ('xqr_code', models.TextField(blank=True, null=True, verbose_name='XQuery Read', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to read the PcT.')),
                ('xqw_code', models.TextField(blank=True, null=True, verbose_name='XQuery Write', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to write the PcT.')),
                ('data_name', models.CharField(db_index=True, max_length=110, verbose_name='data name', help_text='Type a name for this ComplexType.')),
                ('adapter_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='Element UUID', help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific DvAdapter complexType.', editable=False)),
                ('vtb_required', models.BooleanField(verbose_name='VTB Required?', default=False, help_text='Require a Valid begin time?')),
                ('vte_required', models.BooleanField(verbose_name='VTE Required?', default=False, help_text='Require a Valid end time?')),
                ('size', models.IntegerField(blank=True, null=True, verbose_name='size', help_text='The size of the content.')),
                ('encoding', models.CharField(max_length=20, verbose_name='encoding', default='utf-8', help_text="<a href='http://www.iana.org/assignments/character-sets/character-sets.txt'>List of encoding types at IANA.</a>")),
                ('language', models.CharField(max_length=40, verbose_name='default language', default='en-US', help_text='Optional: Choose the DEFAULT language of the content.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('lang_required', models.BooleanField(verbose_name='Language Required?', default=False, help_text='Require a language element?')),
                ('fenums', models.TextField(blank=True, verbose_name='formalism options', help_text='Leave blank to allow any formalisms or constrain the formalism to these options.  One per line.')),
                ('fenums_def', models.TextField(blank=True, verbose_name='formalism definitions', help_text="Enter a URI for each option. One per line. These are used as rdf:isDefinedBy in the semantics. If the same URI is to be used for all options then enter it on the first line only. Name of the formalism or syntax used to inform an application regarding a candidate parser to use on the content. Examples might include: 'ATL', 'MOLA', 'QVT', 'GDL', 'GLIF', etc. for DvParsables. Text-based formats that have a MIME type assigned, such as XML, XHTML, etc. should use DvMediaType.")),
                ('media_type', models.TextField(blank=True, verbose_name='Media Type', help_text="The allowed Media Types of the included data, one per line; i.e. application/rdf+xml, image/jpeg, video/mp4. See < a href='http://www.iana.org/assignments/media-types/media-types.xhtml'>IANA</a>.")),
                ('compression_type', models.TextField(blank=True, verbose_name='compression Type', help_text="The allowed Compression Types of the included data, one per line. See <a href='http://en.wikipedia.org/wiki/List_of_archive_formats'>Listing</a>.")),
                ('hash_function', models.TextField(blank=True, verbose_name='HASH Function', help_text="List of allowed HASH functions. See <a href='http://en.wikipedia.org/wiki/Hash_function'>HASH Functions</a>")),
                ('alt_required', models.BooleanField(verbose_name='Alt Text Required?', default=False, help_text='Require an alt-txt element?')),
                ('media_required', models.BooleanField(verbose_name='Media Type Required?', default=False, help_text='Require a media-type element?')),
                ('comp_required', models.BooleanField(verbose_name='Compression Type Required?', default=False, help_text='Require a compression-type element?')),
                ('hash_required', models.BooleanField(verbose_name='HASH Required?', default=False, help_text='Require hash-function and hash-result elements?')),
                ('content', models.CharField(max_length=20, verbose_name='Media Content', default='user', help_text='Select the location of the data. Via a URL or embedded in the data instance.', choices=[(None, 'Default is allow user choice'), ('user', 'User Choice'), ('url', 'Via URL'), ('embed', 'Embedded in data')])),
            ],
            options={
                'verbose_name_plural': 'DvMedia',
                'verbose_name': 'DvMedia',
                'ordering': ['prj_name', 'data_name'],
            },
        ),
        migrations.CreateModel(
            name='DvOrdinal',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('ct_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='UUID', help_text='A unique identifier for this PCT.', editable=False)),
                ('created', models.DateTimeField(verbose_name='created', auto_now_add=True, help_text='The dateTime that the PCT was created.')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated', help_text='Last update.')),
                ('published', models.BooleanField(verbose_name='published', default=False, help_text='Published must be a green check icon in order to use this in a CM. This is not a user editable. It is managed by the publication process.')),
                ('description', models.TextField(null=True, verbose_name='description', help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the PcT.')),
                ('schema_code', models.TextField(blank=True, null=True, verbose_name='Schema Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create an entry in a CM.')),
                ('asserts', models.TextField(blank=True, null=True, verbose_name='asserts', default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.')),
                ('lang', models.CharField(max_length=40, verbose_name='language', default='en-US', help_text='Choose the language of this PcT.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('r_code', models.TextField(blank=True, null=True, verbose_name='R Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create a function for the R data analysis.')),
                ('xqr_code', models.TextField(blank=True, null=True, verbose_name='XQuery Read', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to read the PcT.')),
                ('xqw_code', models.TextField(blank=True, null=True, verbose_name='XQuery Write', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to write the PcT.')),
                ('data_name', models.CharField(db_index=True, max_length=110, verbose_name='data name', help_text='Type a name for this ComplexType.')),
                ('adapter_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='Element UUID', help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific DvAdapter complexType.', editable=False)),
                ('vtb_required', models.BooleanField(verbose_name='VTB Required?', default=False, help_text='Require a Valid begin time?')),
                ('vte_required', models.BooleanField(verbose_name='VTE Required?', default=False, help_text='Require a Valid end time?')),
                ('normal_status', models.CharField(blank=True, max_length=110, null=True, verbose_name='normal status', help_text='Enter text that indicates a normal status.')),
                ('ordinals', models.TextField(verbose_name='ordinals', help_text='Enter the ordered sequence of integer values. The base integer is zero with any number of integer values used to order the symbols. Example A: 0 = Trace, 1 = +, 2 = ++, 3 = +++, etc. Example B: 0 = Mild, 1 = Moderate, 2 = Severe. One per line.')),
                ('symbols', models.TextField(verbose_name='symbols', help_text="Enter the symbols or the text that represent the ordinal values, which may be strings made from '+' symbols, or other enumerations of terms such as 'mild', 'moderate', 'severe', or even the same number series used for the ordinal values, e.g. '1', '2', '3'.. One per line.")),
                ('symbols_def', models.TextField(blank=True, verbose_name='symbols definition', help_text='Enter a URI for each symbol. One per line. These are used as rdf:isDefinedBy in the semantics. If the same URI is to be used for all symbols then enter it on the first line only.')),
            ],
            options={
                'verbose_name': 'DvOrdinal',
                'ordering': ['prj_name', 'data_name'],
            },
        ),
        migrations.CreateModel(
            name='DvParsable',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('ct_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='UUID', help_text='A unique identifier for this PCT.', editable=False)),
                ('created', models.DateTimeField(verbose_name='created', auto_now_add=True, help_text='The dateTime that the PCT was created.')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated', help_text='Last update.')),
                ('published', models.BooleanField(verbose_name='published', default=False, help_text='Published must be a green check icon in order to use this in a CM. This is not a user editable. It is managed by the publication process.')),
                ('description', models.TextField(null=True, verbose_name='description', help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the PcT.')),
                ('schema_code', models.TextField(blank=True, null=True, verbose_name='Schema Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create an entry in a CM.')),
                ('asserts', models.TextField(blank=True, null=True, verbose_name='asserts', default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.')),
                ('lang', models.CharField(max_length=40, verbose_name='language', default='en-US', help_text='Choose the language of this PcT.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('r_code', models.TextField(blank=True, null=True, verbose_name='R Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create a function for the R data analysis.')),
                ('xqr_code', models.TextField(blank=True, null=True, verbose_name='XQuery Read', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to read the PcT.')),
                ('xqw_code', models.TextField(blank=True, null=True, verbose_name='XQuery Write', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to write the PcT.')),
                ('data_name', models.CharField(db_index=True, max_length=110, verbose_name='data name', help_text='Type a name for this ComplexType.')),
                ('adapter_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='Element UUID', help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific DvAdapter complexType.', editable=False)),
                ('vtb_required', models.BooleanField(verbose_name='VTB Required?', default=False, help_text='Require a Valid begin time?')),
                ('vte_required', models.BooleanField(verbose_name='VTE Required?', default=False, help_text='Require a Valid end time?')),
                ('size', models.IntegerField(blank=True, null=True, verbose_name='size', help_text='The size of the content.')),
                ('encoding', models.CharField(max_length=20, verbose_name='encoding', default='utf-8', help_text="<a href='http://www.iana.org/assignments/character-sets/character-sets.txt'>List of encoding types at IANA.</a>")),
                ('language', models.CharField(max_length=40, verbose_name='default language', default='en-US', help_text='Optional: Choose the DEFAULT language of the content.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('lang_required', models.BooleanField(verbose_name='Language Required?', default=False, help_text='Require a language element?')),
                ('fenums', models.TextField(blank=True, verbose_name='formalism options', help_text='Leave blank to allow any formalisms or constrain the formalism to these options.  One per line.')),
                ('fenums_def', models.TextField(blank=True, verbose_name='formalism definitions', help_text="Enter a URI for each option. One per line. These are used as rdf:isDefinedBy in the semantics. If the same URI is to be used for all options then enter it on the first line only. Name of the formalism or syntax used to inform an application regarding a candidate parser to use on the content. Examples might include: 'ATL', 'MOLA', 'QVT', 'GDL', 'GLIF', etc. for DvParsables. Text-based formats that have a MIME type assigned, such as XML, XHTML, etc. should use DvMediaType.")),
                ('dvparsable_value', models.TextField(blank=True, verbose_name='Default value', help_text='You may enter a default value for the parsable content.')),
            ],
            options={
                'verbose_name': 'DvParsable',
                'ordering': ['prj_name', 'data_name'],
            },
        ),
        migrations.CreateModel(
            name='DvQuantity',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('ct_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='UUID', help_text='A unique identifier for this PCT.', editable=False)),
                ('created', models.DateTimeField(verbose_name='created', auto_now_add=True, help_text='The dateTime that the PCT was created.')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated', help_text='Last update.')),
                ('published', models.BooleanField(verbose_name='published', default=False, help_text='Published must be a green check icon in order to use this in a CM. This is not a user editable. It is managed by the publication process.')),
                ('description', models.TextField(null=True, verbose_name='description', help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the PcT.')),
                ('schema_code', models.TextField(blank=True, null=True, verbose_name='Schema Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create an entry in a CM.')),
                ('asserts', models.TextField(blank=True, null=True, verbose_name='asserts', default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.')),
                ('lang', models.CharField(max_length=40, verbose_name='language', default='en-US', help_text='Choose the language of this PcT.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('r_code', models.TextField(blank=True, null=True, verbose_name='R Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create a function for the R data analysis.')),
                ('xqr_code', models.TextField(blank=True, null=True, verbose_name='XQuery Read', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to read the PcT.')),
                ('xqw_code', models.TextField(blank=True, null=True, verbose_name='XQuery Write', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to write the PcT.')),
                ('data_name', models.CharField(db_index=True, max_length=110, verbose_name='data name', help_text='Type a name for this ComplexType.')),
                ('adapter_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='Element UUID', help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific DvAdapter complexType.', editable=False)),
                ('vtb_required', models.BooleanField(verbose_name='VTB Required?', default=False, help_text='Require a Valid begin time?')),
                ('vte_required', models.BooleanField(verbose_name='VTE Required?', default=False, help_text='Require a Valid end time?')),
                ('normal_status', models.CharField(blank=True, max_length=110, null=True, verbose_name='normal status', help_text='Enter text that indicates a normal status.')),
                ('min_inclusive', models.DecimalField(blank=True, decimal_places=10, max_digits=19, help_text='Enter the minimum (inclusive) value for the magnitude.', null=True, verbose_name='minimum inclusive')),
                ('max_inclusive', models.DecimalField(blank=True, decimal_places=10, max_digits=19, help_text='Enter the maximum (inclusive) value for the magnitude.', null=True, verbose_name='maximum inclusive')),
                ('min_exclusive', models.DecimalField(blank=True, decimal_places=10, max_digits=19, help_text='Enter the minimum (exclusive) value for the magnitude.', null=True, verbose_name='minimum exclusive')),
                ('max_exclusive', models.DecimalField(blank=True, decimal_places=10, max_digits=19, help_text='Enter the maximum (exclusive) value for the magnitude.', null=True, verbose_name='maximum exclusive')),
                ('fraction_digits', models.IntegerField(blank=True, null=True, verbose_name='fraction digits', help_text='Specifies the maximum number of decimal places allowed. Must be equal to or greater than zero for DvQuantity. For DvCount it is zero.')),
                ('total_digits', models.IntegerField(blank=True, null=True, verbose_name='total digits', help_text='Enter the maximum number of digits for the magnitude.')),
            ],
            options={
                'verbose_name_plural': 'DvQuantities',
                'verbose_name': 'DvQuantity',
                'ordering': ['prj_name', 'data_name'],
            },
        ),
        migrations.CreateModel(
            name='DvRatio',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('ct_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='UUID', help_text='A unique identifier for this PCT.', editable=False)),
                ('created', models.DateTimeField(verbose_name='created', auto_now_add=True, help_text='The dateTime that the PCT was created.')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated', help_text='Last update.')),
                ('published', models.BooleanField(verbose_name='published', default=False, help_text='Published must be a green check icon in order to use this in a CM. This is not a user editable. It is managed by the publication process.')),
                ('description', models.TextField(null=True, verbose_name='description', help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the PcT.')),
                ('schema_code', models.TextField(blank=True, null=True, verbose_name='Schema Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create an entry in a CM.')),
                ('asserts', models.TextField(blank=True, null=True, verbose_name='asserts', default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.')),
                ('lang', models.CharField(max_length=40, verbose_name='language', default='en-US', help_text='Choose the language of this PcT.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('r_code', models.TextField(blank=True, null=True, verbose_name='R Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create a function for the R data analysis.')),
                ('xqr_code', models.TextField(blank=True, null=True, verbose_name='XQuery Read', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to read the PcT.')),
                ('xqw_code', models.TextField(blank=True, null=True, verbose_name='XQuery Write', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to write the PcT.')),
                ('data_name', models.CharField(db_index=True, max_length=110, verbose_name='data name', help_text='Type a name for this ComplexType.')),
                ('adapter_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='Element UUID', help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific DvAdapter complexType.', editable=False)),
                ('vtb_required', models.BooleanField(verbose_name='VTB Required?', default=False, help_text='Require a Valid begin time?')),
                ('vte_required', models.BooleanField(verbose_name='VTE Required?', default=False, help_text='Require a Valid end time?')),
                ('normal_status', models.CharField(blank=True, max_length=110, null=True, verbose_name='normal status', help_text='Enter text that indicates a normal status.')),
                ('min_inclusive', models.DecimalField(blank=True, decimal_places=10, max_digits=19, help_text='Enter the minimum (inclusive) value for the magnitude.', null=True, verbose_name='minimum inclusive')),
                ('max_inclusive', models.DecimalField(blank=True, decimal_places=10, max_digits=19, help_text='Enter the maximum (inclusive) value for the magnitude.', null=True, verbose_name='maximum inclusive')),
                ('min_exclusive', models.DecimalField(blank=True, decimal_places=10, max_digits=19, help_text='Enter the minimum (exclusive) value for the magnitude.', null=True, verbose_name='minimum exclusive')),
                ('max_exclusive', models.DecimalField(blank=True, decimal_places=10, max_digits=19, help_text='Enter the maximum (exclusive) value for the magnitude.', null=True, verbose_name='maximum exclusive')),
                ('fraction_digits', models.IntegerField(blank=True, null=True, verbose_name='fraction digits', help_text='Specifies the maximum number of decimal places allowed. Must be equal to or greater than zero for DvQuantity. For DvCount it is zero.')),
                ('total_digits', models.IntegerField(blank=True, null=True, verbose_name='total digits', help_text='Enter the maximum number of digits for the magnitude.')),
                ('ratio_type', models.CharField(max_length=10, verbose_name='ratio type', choices=[('ratio', 'Ratio'), ('proportion', 'Proportion'), ('rate', 'Rate')])),
                ('num_min_inclusive', models.IntegerField(blank=True, null=True, verbose_name='numerator minimum inclusive', help_text='Enter the minimum (inclusive) value for the numerator.')),
                ('num_max_inclusive', models.IntegerField(blank=True, null=True, verbose_name='numerator maximum inclusive', help_text='Enter the maximum (inclusive) value for the numerator.')),
                ('num_min_exclusive', models.IntegerField(blank=True, null=True, verbose_name='numerator minimum exclusive', help_text='Enter the minimum (exclusive) value for the numerator.')),
                ('num_max_exclusive', models.IntegerField(blank=True, null=True, verbose_name='numerator maximum exclusive', help_text='Enter the maximum (exclusive) value for the numerator.')),
                ('num_fraction_digits', models.IntegerField(blank=True, null=True, verbose_name='fraction digits', help_text='Specifies the maximum number of decimal places allowed in the numerator. Must be equal to or greater than zero.')),
                ('num_total_digits', models.IntegerField(blank=True, null=True, verbose_name='total digits', help_text='Enter the maximum number of digits for the numerator.')),
                ('den_min_inclusive', models.IntegerField(blank=True, null=True, verbose_name='denominator minimum inclusive', help_text='Enter the minimum (inclusive) value for the denominator.')),
                ('den_max_inclusive', models.IntegerField(blank=True, null=True, verbose_name='denominator maximum inclusive', help_text='Enter the maximum (inclusive) value for the denominator.')),
                ('den_min_exclusive', models.IntegerField(blank=True, null=True, verbose_name='denominator minimum exclusive', help_text='Enter the minimum (exclusive) value for the denominator.')),
                ('den_max_exclusive', models.IntegerField(blank=True, null=True, verbose_name='denominator maximum exclusive', help_text='Enter the maximum (exclusive) value for the denominator.')),
                ('den_fraction_digits', models.IntegerField(blank=True, null=True, verbose_name='fraction digits', help_text='Specifies the maximum number of decimal places allowed in the denominator. Must be equal to or greater than zero.')),
                ('den_total_digits', models.IntegerField(blank=True, null=True, verbose_name='total digits', help_text='Enter the maximum number of digits for the denominator.')),
            ],
            options={
                'verbose_name': 'DvRatio',
                'ordering': ['prj_name', 'data_name'],
            },
        ),
        migrations.CreateModel(
            name='DvString',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('ct_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='UUID', help_text='A unique identifier for this PCT.', editable=False)),
                ('created', models.DateTimeField(verbose_name='created', auto_now_add=True, help_text='The dateTime that the PCT was created.')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated', help_text='Last update.')),
                ('published', models.BooleanField(verbose_name='published', default=False, help_text='Published must be a green check icon in order to use this in a CM. This is not a user editable. It is managed by the publication process.')),
                ('description', models.TextField(null=True, verbose_name='description', help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the PcT.')),
                ('schema_code', models.TextField(blank=True, null=True, verbose_name='Schema Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create an entry in a CM.')),
                ('asserts', models.TextField(blank=True, null=True, verbose_name='asserts', default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.')),
                ('lang', models.CharField(max_length=40, verbose_name='language', default='en-US', help_text='Choose the language of this PcT.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('r_code', models.TextField(blank=True, null=True, verbose_name='R Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create a function for the R data analysis.')),
                ('xqr_code', models.TextField(blank=True, null=True, verbose_name='XQuery Read', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to read the PcT.')),
                ('xqw_code', models.TextField(blank=True, null=True, verbose_name='XQuery Write', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to write the PcT.')),
                ('data_name', models.CharField(db_index=True, max_length=110, verbose_name='data name', help_text='Type a name for this ComplexType.')),
                ('adapter_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='Element UUID', help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific DvAdapter complexType.', editable=False)),
                ('vtb_required', models.BooleanField(verbose_name='VTB Required?', default=False, help_text='Require a Valid begin time?')),
                ('vte_required', models.BooleanField(verbose_name='VTE Required?', default=False, help_text='Require a Valid end time?')),
                ('min_length', models.IntegerField(blank=True, null=True, verbose_name='minimum length', help_text='Enter the minimum number of characters that are required for this concept. If the character is optional, leave it blank.')),
                ('max_length', models.IntegerField(blank=True, null=True, verbose_name='maximum length', help_text='Enter the maximum number of characters that are required for this concept. If the character is optional, leave it blank.')),
                ('exact_length', models.IntegerField(blank=True, null=True, verbose_name='exact length', help_text='Enter the exact length of the concept. It should be defined only when the number of characters is always fixed (e.g. codes and identifiers).')),
                ('default_value', models.CharField(blank=True, max_length=255, verbose_name='default value', help_text='Enter a default value for the string if desired.')),
                ('enums', models.TextField(blank=True, verbose_name='enumerations', help_text='Enter the categories values of the concept (e.g.Male,Female). One per line.')),
                ('enums_def', models.TextField(blank=True, verbose_name='enumerations definition', help_text='Enter a URI for each enumeration. One per line. These are used as rdf:isDefinedBy in the semantics. If the same URI is to be used for all enumeration then enter it on the first line only.')),
                ('pattern', models.CharField(blank=True, max_length=255, verbose_name='Pattern', help_text="Enter a pattern to constrain string if desired. See <a href='http://www.regular-expressions.info/xml.html'>options</a>")),
                ('whitespace', models.CharField(max_length=8, verbose_name='Whitespace', default='preserve', help_text="Whitespace handling. See <a href=''>here</a>.", choices=[(None, 'Default is to preserve whitespace.'), ('preserve', 'Preserve'), ('replace', 'Replace'), ('collapse', 'Collapse')])),
                ('lang_required', models.BooleanField(verbose_name='Language Required?', default=False, help_text='Require a language element?')),
            ],
            options={
                'verbose_name_plural': 'DvStrings',
                'verbose_name': 'DvString',
                'ordering': ['prj_name', 'data_name'],
            },
        ),
        migrations.CreateModel(
            name='DvTemporal',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('ct_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='UUID', help_text='A unique identifier for this PCT.', editable=False)),
                ('created', models.DateTimeField(verbose_name='created', auto_now_add=True, help_text='The dateTime that the PCT was created.')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated', help_text='Last update.')),
                ('published', models.BooleanField(verbose_name='published', default=False, help_text='Published must be a green check icon in order to use this in a CM. This is not a user editable. It is managed by the publication process.')),
                ('description', models.TextField(null=True, verbose_name='description', help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the PcT.')),
                ('schema_code', models.TextField(blank=True, null=True, verbose_name='Schema Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create an entry in a CM.')),
                ('asserts', models.TextField(blank=True, null=True, verbose_name='asserts', default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.')),
                ('lang', models.CharField(max_length=40, verbose_name='language', default='en-US', help_text='Choose the language of this PcT.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('r_code', models.TextField(blank=True, null=True, verbose_name='R Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create a function for the R data analysis.')),
                ('xqr_code', models.TextField(blank=True, null=True, verbose_name='XQuery Read', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to read the PcT.')),
                ('xqw_code', models.TextField(blank=True, null=True, verbose_name='XQuery Write', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to write the PcT.')),
                ('data_name', models.CharField(db_index=True, max_length=110, verbose_name='data name', help_text='Type a name for this ComplexType.')),
                ('adapter_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='Element UUID', help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific DvAdapter complexType.', editable=False)),
                ('vtb_required', models.BooleanField(verbose_name='VTB Required?', default=False, help_text='Require a Valid begin time?')),
                ('vte_required', models.BooleanField(verbose_name='VTE Required?', default=False, help_text='Require a Valid end time?')),
                ('normal_status', models.CharField(blank=True, max_length=110, null=True, verbose_name='normal status', help_text='Enter text that indicates a normal status.')),
                ('allow_duration', models.BooleanField(verbose_name='allow duration', default=False, help_text='If Duration is allowed, no other types will be permitted.')),
                ('allow_ymduration', models.BooleanField(verbose_name='allow yearMonthDuration', default=False, help_text='If yearMonthDuration is allowed, no other types will be permitted.')),
                ('allow_dtduration', models.BooleanField(verbose_name='allow dayTimeDuration', default=False, help_text='If dayTimeDuration is allowed, no other types will be permitted.')),
                ('allow_date', models.BooleanField(verbose_name='allow date', default=False, help_text='Check this box if complete date entry is allowed.')),
                ('allow_time', models.BooleanField(verbose_name='allow time', default=False, help_text='Check this box if time only entry is allowed.')),
                ('allow_datetime', models.BooleanField(verbose_name='allow datetime', default=False, help_text='Check this box if complete dates and times are allowed.')),
                ('allow_day', models.BooleanField(verbose_name='allow day', default=False, help_text='Check this box if day only is allowed.')),
                ('allow_month', models.BooleanField(verbose_name='allow month', default=False, help_text='Check this box if month only is allowed.')),
                ('allow_year', models.BooleanField(verbose_name='allow year', default=False, help_text='Check this box if year only entry is allowed.')),
                ('allow_year_month', models.BooleanField(verbose_name='allow year month', default=False, help_text='Check this box if combination of years and months are allowed.')),
                ('allow_month_day', models.BooleanField(verbose_name='allow month day', default=False, help_text='Check this box if combination of months and days are allowed.')),
                ('require_duration', models.BooleanField(verbose_name='require duration', default=False, help_text='If Duration is required, no other types will be permitted.')),
                ('require_ymduration', models.BooleanField(verbose_name='require yearMonthDuration', default=False, help_text='If yearMonthDuration is required, no other types will be permitted.')),
                ('require_dtduration', models.BooleanField(verbose_name='require dayTimeDuration', default=False, help_text='If dayTimeDuration is required, no other types will be permitted.')),
                ('require_date', models.BooleanField(verbose_name='require date', default=False, help_text='Check this box if complete date entry is required.')),
                ('require_time', models.BooleanField(verbose_name='require time', default=False, help_text='Check this box if time only entry is required.')),
                ('require_datetime', models.BooleanField(verbose_name='require datetime', default=False, help_text='Check this box if complete dates and times are required.')),
                ('require_day', models.BooleanField(verbose_name='require day', default=False, help_text='Check this box if day only is required.')),
                ('require_month', models.BooleanField(verbose_name='require month', default=False, help_text='Check this box if month only is required.')),
                ('require_year', models.BooleanField(verbose_name='require year', default=False, help_text='Check this box if year only entry is required.')),
                ('require_year_month', models.BooleanField(verbose_name='require year month', default=False, help_text='Check this box if combination of years and months are required.')),
                ('require_month_day', models.BooleanField(verbose_name='require month day', default=False, help_text='Check this box if combination of months and days are required.')),
            ],
            options={
                'verbose_name': 'DvTemporal',
                'ordering': ['prj_name', 'data_name'],
            },
        ),
        migrations.CreateModel(
            name='Participation',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('ct_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='UUID', help_text='A unique identifier for this PCT.', editable=False)),
                ('created', models.DateTimeField(verbose_name='created', auto_now_add=True, help_text='The dateTime that the PCT was created.')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated', help_text='Last update.')),
                ('published', models.BooleanField(verbose_name='published', default=False, help_text='Published must be a green check icon in order to use this in a CM. This is not a user editable. It is managed by the publication process.')),
                ('description', models.TextField(null=True, verbose_name='description', help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the PcT.')),
                ('schema_code', models.TextField(blank=True, null=True, verbose_name='Schema Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create an entry in a CM.')),
                ('asserts', models.TextField(blank=True, null=True, verbose_name='asserts', default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.')),
                ('lang', models.CharField(max_length=40, verbose_name='language', default='en-US', help_text='Choose the language of this PcT.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('r_code', models.TextField(blank=True, null=True, verbose_name='R Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create a function for the R data analysis.')),
                ('xqr_code', models.TextField(blank=True, null=True, verbose_name='XQuery Read', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to read the PcT.')),
                ('xqw_code', models.TextField(blank=True, null=True, verbose_name='XQuery Write', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to write the PcT.')),
                ('label', models.CharField(max_length=110, verbose_name='label', help_text='A label used to identify this model in CM Generator.')),
                ('function', models.ForeignKey(to='cmgen.DvString', help_text='The function of the Party in this participation (note that a given party might participate in more than one way in a particular activity). In some applications this might be called a Role.', null=True, related_name='function')),
                ('mode', models.ForeignKey(to='cmgen.DvString', help_text='The mode of the performer / activity interaction, e.g. present, by telephone, by email etc. If the participation is by device or software it may contain a protocol standard or interface definition.', null=True, related_name='mode')),
            ],
            options={
                'verbose_name': 'Participation',
                'ordering': ['prj_name', 'label'],
            },
        ),
        migrations.CreateModel(
            name='Party',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('ct_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='UUID', help_text='A unique identifier for this PCT.', editable=False)),
                ('created', models.DateTimeField(verbose_name='created', auto_now_add=True, help_text='The dateTime that the PCT was created.')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated', help_text='Last update.')),
                ('published', models.BooleanField(verbose_name='published', default=False, help_text='Published must be a green check icon in order to use this in a CM. This is not a user editable. It is managed by the publication process.')),
                ('description', models.TextField(null=True, verbose_name='description', help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the PcT.')),
                ('schema_code', models.TextField(blank=True, null=True, verbose_name='Schema Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create an entry in a CM.')),
                ('asserts', models.TextField(blank=True, null=True, verbose_name='asserts', default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.')),
                ('lang', models.CharField(max_length=40, verbose_name='language', default='en-US', help_text='Choose the language of this PcT.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('r_code', models.TextField(blank=True, null=True, verbose_name='R Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create a function for the R data analysis.')),
                ('xqr_code', models.TextField(blank=True, null=True, verbose_name='XQuery Read', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to read the PcT.')),
                ('xqw_code', models.TextField(blank=True, null=True, verbose_name='XQuery Write', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to write the PcT.')),
                ('label', models.CharField(max_length=110, verbose_name='label', help_text='A label used to identify this model in CM Generator.')),
                ('require_name', models.BooleanField(verbose_name='require name', default=False, help_text='Check this box if a party-name element is required.')),
                ('party_details', models.ForeignKey(blank=True, to='cmgen.Cluster', help_text='A Cluster structure that defines the details of this Party.', null=True, verbose_name='details', related_name='party_related')),
                ('party_ref', models.ManyToManyField(blank=True, verbose_name='external reference', to='cmgen.DvLink', help_text='An optional DvLink that points to a description of this Party in another service.')),
            ],
            options={
                'verbose_name': 'Party',
                'ordering': ['prj_name', 'label'],
            },
        ),
        migrations.CreateModel(
            name='Predicate',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('pred_def', models.CharField(unique=True, db_index=True, max_length=2048, verbose_name='predicate definition', help_text='Enter the predicate including the namespace abbreviation followed by a colon.')),
            ],
        ),
        migrations.CreateModel(
            name='PredObj',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('name', models.CharField(unique=True, db_index=True, max_length=255, verbose_name='name', help_text='Enter a unique, descriptive name for this entry.')),
                ('obj', models.CharField(max_length=5000, verbose_name='Object', help_text='Enter a resource link. Should be a resolvable URI.')),
                ('pred', models.ForeignKey(to='cmgen.Predicate', help_text='Choose a predicate.', verbose_name='Predicate')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('prj_name', models.CharField(unique=True, db_index=True, max_length=110, verbose_name='project name', help_text='Enter the name of your project.')),
                ('description', models.TextField(blank=True, verbose_name='project description', help_text='Enter a description or explaination of an acronym of the project.')),
            ],
            options={
                'verbose_name_plural': 'Projects',
                'verbose_name': 'Project',
                'ordering': ['prj_name'],
            },
        ),
        migrations.CreateModel(
            name='ReferenceRange',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', auto_created=True, serialize=False)),
                ('ct_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='UUID', help_text='A unique identifier for this PCT.', editable=False)),
                ('created', models.DateTimeField(verbose_name='created', auto_now_add=True, help_text='The dateTime that the PCT was created.')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated', help_text='Last update.')),
                ('published', models.BooleanField(verbose_name='published', default=False, help_text='Published must be a green check icon in order to use this in a CM. This is not a user editable. It is managed by the publication process.')),
                ('description', models.TextField(null=True, verbose_name='description', help_text='Enter a free text description for this complexType. Include a usage statement and any possible misuses. This is used as the annotation for the PcT.')),
                ('schema_code', models.TextField(blank=True, null=True, verbose_name='Schema Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create an entry in a CM.')),
                ('asserts', models.TextField(blank=True, null=True, verbose_name='asserts', default='', help_text='Valid XPath 2.0 assert statements. See the documentation for details. One per line.')),
                ('lang', models.CharField(max_length=40, verbose_name='language', default='en-US', help_text='Choose the language of this PcT.', choices=[('en-US', 'US English'), ('pt-BR', 'Brazilian Portuguese'), ('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmal'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-cn', 'Simplified Chinese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese'), ('zh-tw', 'Traditional Chinese')])),
                ('r_code', models.TextField(blank=True, null=True, verbose_name='R Code', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required for each component to create a function for the R data analysis.')),
                ('xqr_code', models.TextField(blank=True, null=True, verbose_name='XQuery Read', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to read the PcT.')),
                ('xqw_code', models.TextField(blank=True, null=True, verbose_name='XQuery Write', default='', help_text='This is only writable from the CMGEN, not via user input. It contains the code required to create a XQuery to write the PcT.')),
                ('data_name', models.CharField(db_index=True, max_length=110, verbose_name='data name', help_text='Type a name for this ComplexType.')),
                ('adapter_id', django_extensions.db.fields.UUIDField(blank=True, verbose_name='Element UUID', help_text='This UUID is generated for datatype that can be included in a Cluster. It is used to create a specific DvAdapter complexType.', editable=False)),
                ('vtb_required', models.BooleanField(verbose_name='VTB Required?', default=False, help_text='Require a Valid begin time?')),
                ('vte_required', models.BooleanField(verbose_name='VTE Required?', default=False, help_text='Require a Valid end time?')),
                ('definition', models.CharField(max_length=110, verbose_name='Definition', help_text="Enter the term that indicates the status of this range, e.g. 'normal', 'critical', 'therapeutic' etc.")),
                ('is_normal', models.BooleanField(verbose_name='Is Normal?', default=False, help_text='Is this considered the normal range?')),
                ('data_range', models.ForeignKey(to='cmgen.DvInterval', help_text='The data range for this meaning. Select the appropriate DvInterval.', verbose_name='data range')),
                ('prj_name', models.ForeignKey(to='cmgen.Project', help_text='Choose the name of your Project.', verbose_name='Project Name')),
                ('semantics', models.ManyToManyField(verbose_name='semantics', to='cmgen.PredObj', help_text='Select one or more Predicate/Object combinations for the semantics. You must select at least one.')),
            ],
            options={
                'verbose_name': 'ReferenceRange',
                'ordering': ['prj_name', 'data_name'],
            },
        ),
        migrations.AddField(
            model_name='party',
            name='prj_name',
            field=models.ForeignKey(to='cmgen.Project', help_text='Choose the name of your Project.', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='party',
            name='semantics',
            field=models.ManyToManyField(verbose_name='semantics', to='cmgen.PredObj', help_text='Select one or more Predicate/Object combinations for the semantics. You must select at least one.'),
        ),
        migrations.AddField(
            model_name='participation',
            name='performer',
            field=models.ForeignKey(to='cmgen.Party', help_text='The Party instance and possibly demographic system link of the party participating in the activity.', null=True),
        ),
        migrations.AddField(
            model_name='participation',
            name='prj_name',
            field=models.ForeignKey(to='cmgen.Project', help_text='Choose the name of your Project.', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='participation',
            name='semantics',
            field=models.ManyToManyField(verbose_name='semantics', to='cmgen.PredObj', help_text='Select one or more Predicate/Object combinations for the semantics. You must select at least one.'),
        ),
        migrations.AddField(
            model_name='dvtemporal',
            name='prj_name',
            field=models.ForeignKey(to='cmgen.Project', help_text='Choose the name of your Project.', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='dvtemporal',
            name='reference_ranges',
            field=models.ManyToManyField(blank=True, verbose_name='reference ranges', to='cmgen.ReferenceRange', help_text='Select the appropriate ReferenceRange(s) that defines each ordered value. The listing is by Project: Reference Range Name.'),
        ),
        migrations.AddField(
            model_name='dvtemporal',
            name='semantics',
            field=models.ManyToManyField(verbose_name='semantics', to='cmgen.PredObj', help_text='Select one or more Predicate/Object combinations for the semantics. You must select at least one.'),
        ),
        migrations.AddField(
            model_name='dvstring',
            name='prj_name',
            field=models.ForeignKey(to='cmgen.Project', help_text='Choose the name of your Project.', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='dvstring',
            name='semantics',
            field=models.ManyToManyField(verbose_name='semantics', to='cmgen.PredObj', help_text='Select one or more Predicate/Object combinations for the semantics. You must select at least one.'),
        ),
        migrations.AddField(
            model_name='dvratio',
            name='den_units',
            field=models.ForeignKey(blank=True, to='cmgen.DvString', help_text='Choose a DvString for the units of measurement of the denominator.', null=True, verbose_name='denominator units', related_name='den_units'),
        ),
        migrations.AddField(
            model_name='dvratio',
            name='num_units',
            field=models.ForeignKey(blank=True, to='cmgen.DvString', help_text='Choose a DvString for the units of measurement of the numerator.', null=True, verbose_name='numerator units', related_name='num_units'),
        ),
        migrations.AddField(
            model_name='dvratio',
            name='prj_name',
            field=models.ForeignKey(to='cmgen.Project', help_text='Choose the name of your Project.', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='dvratio',
            name='ratio_units',
            field=models.ForeignKey(blank=True, to='cmgen.DvString', help_text='Choose a DvString for the units of measurement of the ratio (magnitude).', null=True, verbose_name='ratio units', related_name='ratio_units'),
        ),
        migrations.AddField(
            model_name='dvratio',
            name='reference_ranges',
            field=models.ManyToManyField(blank=True, verbose_name='reference ranges', to='cmgen.ReferenceRange', help_text='Select the appropriate ReferenceRange(s) that defines each ordered value. The listing is by Project: Reference Range Name.'),
        ),
        migrations.AddField(
            model_name='dvratio',
            name='semantics',
            field=models.ManyToManyField(verbose_name='semantics', to='cmgen.PredObj', help_text='Select one or more Predicate/Object combinations for the semantics. You must select at least one.'),
        ),
        migrations.AddField(
            model_name='dvquantity',
            name='prj_name',
            field=models.ForeignKey(to='cmgen.Project', help_text='Choose the name of your Project.', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='dvquantity',
            name='reference_ranges',
            field=models.ManyToManyField(blank=True, verbose_name='reference ranges', to='cmgen.ReferenceRange', help_text='Select the appropriate ReferenceRange(s) that defines each ordered value. The listing is by Project: Reference Range Name.'),
        ),
        migrations.AddField(
            model_name='dvquantity',
            name='semantics',
            field=models.ManyToManyField(verbose_name='semantics', to='cmgen.PredObj', help_text='Select one or more Predicate/Object combinations for the semantics. You must select at least one.'),
        ),
        migrations.AddField(
            model_name='dvquantity',
            name='units',
            field=models.ForeignKey(blank=True, to='cmgen.DvString', help_text='Choose a DvString for the allowed units of measurement of this concept.', null=True, verbose_name='units'),
        ),
        migrations.AddField(
            model_name='dvparsable',
            name='prj_name',
            field=models.ForeignKey(to='cmgen.Project', help_text='Choose the name of your Project.', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='dvparsable',
            name='semantics',
            field=models.ManyToManyField(verbose_name='semantics', to='cmgen.PredObj', help_text='Select one or more Predicate/Object combinations for the semantics. You must select at least one.'),
        ),
        migrations.AddField(
            model_name='dvordinal',
            name='prj_name',
            field=models.ForeignKey(to='cmgen.Project', help_text='Choose the name of your Project.', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='dvordinal',
            name='reference_ranges',
            field=models.ManyToManyField(blank=True, verbose_name='reference ranges', to='cmgen.ReferenceRange', help_text='Select the appropriate ReferenceRange(s) that defines each ordered value. The listing is by Project: Reference Range Name.'),
        ),
        migrations.AddField(
            model_name='dvordinal',
            name='semantics',
            field=models.ManyToManyField(verbose_name='semantics', to='cmgen.PredObj', help_text='Select one or more Predicate/Object combinations for the semantics. You must select at least one.'),
        ),
        migrations.AddField(
            model_name='dvmedia',
            name='prj_name',
            field=models.ForeignKey(to='cmgen.Project', help_text='Choose the name of your Project.', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='dvmedia',
            name='semantics',
            field=models.ManyToManyField(verbose_name='semantics', to='cmgen.PredObj', help_text='Select one or more Predicate/Object combinations for the semantics. You must select at least one.'),
        ),
        migrations.AddField(
            model_name='dvlink',
            name='prj_name',
            field=models.ForeignKey(to='cmgen.Project', help_text='Choose the name of your Project.', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='dvlink',
            name='semantics',
            field=models.ManyToManyField(verbose_name='semantics', to='cmgen.PredObj', help_text='Select one or more Predicate/Object combinations for the semantics. You must select at least one.'),
        ),
        migrations.AddField(
            model_name='dvinterval',
            name='prj_name',
            field=models.ForeignKey(to='cmgen.Project', help_text='Choose the name of your Project.', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='dvinterval',
            name='semantics',
            field=models.ManyToManyField(verbose_name='semantics', to='cmgen.PredObj', help_text='Select one or more Predicate/Object combinations for the semantics. You must select at least one.'),
        ),
        migrations.AddField(
            model_name='dvcount',
            name='prj_name',
            field=models.ForeignKey(to='cmgen.Project', help_text='Choose the name of your Project.', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='dvcount',
            name='reference_ranges',
            field=models.ManyToManyField(blank=True, verbose_name='reference ranges', to='cmgen.ReferenceRange', help_text='Select the appropriate ReferenceRange(s) that defines each ordered value. The listing is by Project: Reference Range Name.'),
        ),
        migrations.AddField(
            model_name='dvcount',
            name='semantics',
            field=models.ManyToManyField(verbose_name='semantics', to='cmgen.PredObj', help_text='Select one or more Predicate/Object combinations for the semantics. You must select at least one.'),
        ),
        migrations.AddField(
            model_name='dvcount',
            name='units',
            field=models.ForeignKey(blank=True, to='cmgen.DvString', help_text='Choose a DvString for the allowed units of measurement of this concept.', null=True, verbose_name='units'),
        ),
        migrations.AddField(
            model_name='dvboolean',
            name='prj_name',
            field=models.ForeignKey(to='cmgen.Project', help_text='Choose the name of your Project.', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='dvboolean',
            name='semantics',
            field=models.ManyToManyField(verbose_name='semantics', to='cmgen.PredObj', help_text='Select one or more Predicate/Object combinations for the semantics. You must select at least one.'),
        ),
        migrations.AddField(
            model_name='concept',
            name='links',
            field=models.ManyToManyField(verbose_name='Links', to='cmgen.DvLink', help_text='Select links models to/from this Concept Model (CM)', related_name='links'),
        ),
        migrations.AddField(
            model_name='concept',
            name='participations',
            field=models.ManyToManyField(verbose_name='Participations', to='cmgen.Participation', help_text='Choose the participation models element model of this Concept Model (CM)'),
        ),
        migrations.AddField(
            model_name='concept',
            name='prj_name',
            field=models.ForeignKey(to='cmgen.Project', help_text='Choose the name of your Project.', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='concept',
            name='protocol',
            field=models.ForeignKey(to='cmgen.DvLink', help_text='Choose the protocol element model of this Concept Model (CM)', verbose_name='Protocol', related_name='protocol'),
        ),
        migrations.AddField(
            model_name='concept',
            name='semantics',
            field=models.ManyToManyField(verbose_name='semantics', to='cmgen.PredObj', help_text='Select one or more Predicate/Object combinations for the semantics. You must select at least one.'),
        ),
        migrations.AddField(
            model_name='concept',
            name='subject',
            field=models.ForeignKey(to='cmgen.Party', help_text='Choose the subject element Party model of this Concept Model (CM)', verbose_name='Subject'),
        ),
        migrations.AddField(
            model_name='concept',
            name='workflow',
            field=models.ForeignKey(to='cmgen.DvLink', help_text='Choose the workflow element model of this Concept Model (CM)', verbose_name='Workflow', related_name='workflow'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='dvboolean',
            field=models.ManyToManyField(blank=True, to='cmgen.DvBoolean', help_text='Select zero or more booleans to include in this Cluster.'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='dvcount',
            field=models.ManyToManyField(blank=True, to='cmgen.DvCount', help_text='Select zero or more counts to include in this Cluster.'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='dvlink',
            field=models.ManyToManyField(blank=True, to='cmgen.DvLink', help_text='Select zero or more links to include in this Cluster.'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='dvmedia',
            field=models.ManyToManyField(blank=True, to='cmgen.DvMedia', help_text='Select zero or more media items to include in this Cluster.'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='dvordinal',
            field=models.ManyToManyField(blank=True, to='cmgen.DvOrdinal', help_text='Select zero or more ordinals to include in this Cluster.'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='dvparsable',
            field=models.ManyToManyField(blank=True, to='cmgen.DvParsable', help_text='Select zero or more parsables to include in this Cluster.'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='dvquantity',
            field=models.ManyToManyField(blank=True, to='cmgen.DvQuantity', help_text='Select zero or more quantity items to include in this Cluster.'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='dvratio',
            field=models.ManyToManyField(blank=True, to='cmgen.DvRatio', help_text='Select zero or more ratios to include in this Cluster.'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='dvstring',
            field=models.ManyToManyField(blank=True, to='cmgen.DvString', help_text='Select zero or more strings to include in this Cluster.'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='dvtemporal',
            field=models.ManyToManyField(blank=True, to='cmgen.DvTemporal', help_text='Select zero or more temporal items to include in this Cluster.'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='prj_name',
            field=models.ForeignKey(to='cmgen.Project', help_text='Choose the name of your Project.', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='semantics',
            field=models.ManyToManyField(verbose_name='semantics', to='cmgen.PredObj', help_text='Select one or more Predicate/Object combinations for the semantics. You must select at least one.'),
        ),
        migrations.AddField(
            model_name='audit',
            name='location',
            field=models.ForeignKey(blank=True, to='cmgen.Cluster', help_text='A Cluster for location information.', null=True, verbose_name='location', related_name='audit_related'),
        ),
        migrations.AddField(
            model_name='audit',
            name='prj_name',
            field=models.ForeignKey(to='cmgen.Project', help_text='Choose the name of your Project.', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='audit',
            name='semantics',
            field=models.ManyToManyField(verbose_name='semantics', to='cmgen.PredObj', help_text='Select one or more Predicate/Object combinations for the semantics. You must select at least one.'),
        ),
        migrations.AddField(
            model_name='audit',
            name='system_id',
            field=models.ForeignKey(blank=True, to='cmgen.DvString', help_text='A model for an Identifier of the system which handled the information item.', null=True, verbose_name='system id'),
        ),
        migrations.AddField(
            model_name='audit',
            name='system_user',
            field=models.ForeignKey(blank=True, to='cmgen.Party', help_text='A model for user(s) who created, committed, forwarded or otherwise handled the item.', null=True, verbose_name='system user'),
        ),
        migrations.AddField(
            model_name='attestation',
            name='attested_view',
            field=models.ForeignKey(to='cmgen.DvMedia', help_text='A recorded view that is being attested.', null=True, verbose_name='attested view'),
        ),
        migrations.AddField(
            model_name='attestation',
            name='committer',
            field=models.ForeignKey(to='cmgen.Party', help_text='A Party model for someone that commited the Attestation.', null=True, verbose_name='committer'),
        ),
        migrations.AddField(
            model_name='attestation',
            name='prj_name',
            field=models.ForeignKey(to='cmgen.Project', help_text='Choose the name of your Project.', verbose_name='Project Name'),
        ),
        migrations.AddField(
            model_name='attestation',
            name='proof',
            field=models.ForeignKey(to='cmgen.DvParsable', help_text='Proof of attestation such as an GPG signature.', null=True, verbose_name='proof'),
        ),
        migrations.AddField(
            model_name='attestation',
            name='reason',
            field=models.ForeignKey(to='cmgen.DvString', help_text='Select a DvString type as a model for the reason.', null=True, verbose_name='reason'),
        ),
        migrations.AddField(
            model_name='attestation',
            name='semantics',
            field=models.ManyToManyField(verbose_name='semantics', to='cmgen.PredObj', help_text='Select one or more Predicate/Object combinations for the semantics. You must select at least one.'),
        ),
    ]
